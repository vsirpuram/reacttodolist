{"version":3,"sources":["components/Form.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","Fragment","className","onSubmit","e","preventDefault","text","completed","id","Math","floor","random","type","placeholder","onChange","target","value","aria-hidden","Todo","todo","editTodo","setEditTodo","onClick","map","el","filter","TodoList","index","key","App","useState","useEffect","getFromLocalStorage","saveToLocalStorage","localStorage","setItem","JSON","stringify","getItem","todoFromLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAiDeA,EA/CF,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAqB/C,OACC,kBAAC,IAAMC,SAAP,KACC,0BAAMC,UAAU,iBAAiBC,SAfT,SAACC,GAC1BA,EAAEC,iBACFL,EAAS,GAAD,mBACJD,GADI,CAEP,CACCO,KAAMT,EACNU,WAAW,EACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,cAGtBb,EAAa,MAMX,2BACCI,UAAU,aACVU,KAAK,OACLC,YAAY,aACZC,SA1BqB,SAACV,GAEzBN,EAAaM,EAAEW,OAAOC,QAyBnBA,MAAOnB,IAER,4BAAQK,UAAU,YACjB,uBAAGA,UAAU,oBAAoBe,cAAY,a,OCMnCC,EAtCF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,KAAMpB,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,SAAsC,EAA5BoB,SAA4B,EAAlBC,YAqBhD,OACC,yBAAKnB,UAAU,QACd,wBAECA,UAAS,oBAAeiB,EAAKZ,UAAY,YAAc,KACtDY,EAAKb,MAEP,4BAAQgB,QArBc,WACvBtB,EACCD,EAAMwB,KAAI,SAACC,GACV,OAAIA,EAAGhB,KAAOW,EAAKX,GACX,2BACHgB,GADJ,IAECjB,WAAYiB,EAAGjB,YAGViB,OAY0BtB,UAAU,gBAC3C,uBAAGA,UAAU,wBAEd,4BAAQoB,QA7BY,WACrBtB,EAASD,EAAM0B,QAAO,SAACD,GAAD,OAAQA,EAAGhB,KAAOW,EAAKX,QA4BZN,UAAU,cACzC,uBAAGA,UAAU,0BCVFwB,EArBE,SAAC,GAAgD,IAA9C3B,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,SAAsC,EAA5BoB,SAA4B,EAAlBC,YAC9C,OACC,yBAAKnB,UAAU,kBACd,wBAAIA,UAAU,aACZH,EAAMwB,KAAI,SAACJ,EAAMQ,GACjB,GAAkB,KAAdR,EAAKb,MAA6B,MAAda,EAAKb,KAC5B,OACC,kBAAC,EAAD,CACCP,MAAOA,EACPC,SAAUA,EACV4B,IAAKT,EAAKX,GACVW,KAAMA,UC4CCU,EApDH,WAAM,MAIiBC,mBAAS,IAJ1B,mBAIVjC,EAJU,KAICC,EAJD,OAOSgC,mBAAS,IAPlB,mBAOV/B,EAPU,KAOHC,EAPG,KAUjB+B,qBAAU,WACTC,MACE,IAEHD,qBAAU,WACTE,MACE,CAAClC,IAGJ,IAAMkC,EAAqB,WAC1B,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUtC,KAI/CiC,EAAsB,WAC3B,GAAsC,OAAlCE,aAAaI,QAAQ,SACxBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SACvC,CACN,IAAIE,EAAgBH,KAAKI,MAAMN,aAAaI,QAAQ,UAEpDtC,EAASuC,KAIX,OACC,yBAAKrC,UAAU,kBACd,gCACC,4CAED,8BACC,kBAAC,EAAD,CACCL,UAAWA,EACXC,aAAcA,EACdC,MAAOA,EACPC,SAAUA,IAEX,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,SAAUA,OCxClByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e3e490be.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({ inputText, setInputText, todos, setTodos }) => {\r\n\t// Handling onChange event of INPUT\r\n\tconst inputTexthandler = (e) => {\r\n\t\t// console.log(e.target.value);\r\n\t\tsetInputText(e.target.value);\r\n\t};\r\n\r\n\t// Handling onClick event of ADD button\r\n\tconst submitTodoHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetTodos([\r\n\t\t\t...todos,\r\n\t\t\t{\r\n\t\t\t\ttext: inputText,\r\n\t\t\t\tcompleted: false,\r\n\t\t\t\tid: Math.floor(Math.random() * 1000),\r\n\t\t\t},\r\n\t\t]);\r\n\t\tsetInputText(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<form className='form-container' onSubmit={submitTodoHandler}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='todo-input'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Enter task'\r\n\t\t\t\t\tonChange={inputTexthandler}\r\n\t\t\t\t\tvalue={inputText}\r\n\t\t\t\t/>\r\n\t\t\t\t<button className='todo-btn'>\r\n\t\t\t\t\t<i className='fa fa-plus-circle' aria-hidden='true'></i>\r\n\t\t\t\t</button>\r\n\t\t\t\t{/*\r\n\t\t\t\t<select name='todos' className='filter-todo'>\r\n\t\t\t\t\t<option> -- Filter List -- </option>\r\n\t\t\t\t\t<option value='all'>All</option>\r\n\t\t\t\t\t<option value='completed'>Completed</option>\r\n\t\t\t\t\t<option value='uncompleted'>Uncompleted</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t*/}\r\n\t\t\t</form>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ todo, todos, setTodos, editTodo, setEditTodo }) => {\r\n\t// Handling onClick event of Delete button\r\n\tconst deleteHandler = () => {\r\n\t\tsetTodos(todos.filter((el) => el.id !== todo.id));\r\n\t};\r\n\r\n\t// Handling onClick event of Complete button\r\n\tconst completeHandler = () => {\r\n\t\tsetTodos(\r\n\t\t\ttodos.map((el) => {\r\n\t\t\t\tif (el.id === todo.id) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...el,\r\n\t\t\t\t\t\tcompleted: !el.completed,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\treturn el;\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='todo'>\r\n\t\t\t<li\r\n\t\t\t\t// style={todo.completed ? completedStyle : null} OR\r\n\t\t\t\tclassName={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n\t\t\t\t{todo.text}\r\n\t\t\t</li>\r\n\t\t\t<button onClick={completeHandler} className='complete-btn'>\r\n\t\t\t\t<i className='fa fa-check-circle'></i>\r\n\t\t\t</button>\r\n\t\t\t<button onClick={deleteHandler} className='delete-btn'>\r\n\t\t\t\t<i className='fa fa-minus-circle'></i>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Todo;\r\n\r\n/*\r\n   \t// -- Styling the completed text -- //\r\n         const completedStyle = {\r\n            fontStyle: \"italic\",\r\n            textDecoration: \"line-through\",\r\n            opacity: \"0.5\",\r\n         };\r\n   */\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, setTodos, editTodo, setEditTodo }) => {\r\n\treturn (\r\n\t\t<div className='todo-container'>\r\n\t\t\t<ul className='todo-list'>\r\n\t\t\t\t{todos.map((todo, index) => {\r\n\t\t\t\t\tif (todo.text !== \"\" && todo.text !== \" \") {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Todo\r\n\t\t\t\t\t\t\t\ttodos={todos}\r\n\t\t\t\t\t\t\t\tsetTodos={setTodos}\r\n\t\t\t\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\t\t\t\ttodo={todo}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport TodoList from \"./components/TodoList\";\r\n// import uniqueId from \"lodash/uniqueId\";\r\n\r\nconst App = () => {\r\n\t// const [id] = useState(() => uniqueId(\"\"));\r\n\r\n\t// Storing the input text from the UI\r\n\tconst [inputText, setInputText] = useState(\"\");\r\n\r\n\t// Storing todos received from inputText\r\n\tconst [todos, setTodos] = useState([]);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tgetFromLocalStorage();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsaveToLocalStorage();\r\n\t}, [todos]);\r\n\r\n\t// Saving the todos to localStorage\r\n\tconst saveToLocalStorage = () => {\r\n\t\treturn localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n\t};\r\n\r\n\t// Getting the todos from localStorage\r\n\tconst getFromLocalStorage = () => {\r\n\t\tif (localStorage.getItem(\"todos\") === null) {\r\n\t\t\tlocalStorage.setItem(\"todos\", JSON.stringify([]));\r\n\t\t} else {\r\n\t\t\tlet todoFromLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n\t\t\t// console.log(todoFromLocal);\r\n\t\t\tsetTodos(todoFromLocal);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='main-container'>\r\n\t\t\t<header>\r\n\t\t\t\t<h1>To-Do List </h1>\r\n\t\t\t</header>\r\n\t\t\t<main>\r\n\t\t\t\t<Form\r\n\t\t\t\t\tinputText={inputText}\r\n\t\t\t\t\tsetInputText={setInputText}\r\n\t\t\t\t\ttodos={todos}\r\n\t\t\t\t\tsetTodos={setTodos}\r\n\t\t\t\t/>\r\n\t\t\t\t<TodoList todos={todos} setTodos={setTodos} />\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}